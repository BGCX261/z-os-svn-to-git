// Decompiled by Jad v1.5.8g. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 

package com.jsos.httpproxy;

import java.io.IOException;
import java.io.PrintStream;
import java.util.Enumeration;
import java.util.Hashtable;
import javax.servlet.ServletException;
import javax.servlet.http.*;

// Referenced classes of package com.jsos.httpproxy:
//            GetPost

public class HttpProxyServlet extends HttpServlet
{

    public HttpProxyServlet()
    {
        keepHeaders = "true";
    }

    public void init()
        throws ServletException
    {
        host = getInitParameter("host");
        if(host == null)
        {
            System.out.println("HttpProxyServlet needs a host in the parameter.");
            throw new ServletException("HttpProxyServlet needs a host in the parameter.");
        }
        proxyHost = getInitParameter("proxyHost");
        proxyPort = getInitParameter("proxyPort");
        rewriteHost = getInitParameter("rewriteHost");
        encoding = getInitParameter("encoding");
        uri = getInitParameter("uri");
        keepHeaders = getInitParameter("headers");
        if(keepHeaders == null)
            keepHeaders = "true";
    }

    public void doGet(HttpServletRequest httpservletrequest, HttpServletResponse httpservletresponse)
        throws ServletException, IOException
    {
        String s = httpservletrequest.getQueryString();
        String s1 = host;
        Object obj = null;
        if(uri != null)
        {
            uri = normalizeUri(uri);
            String s2 = httpservletrequest.getRequestURI();
            if(s2 != null)
            {
                if(!s2.startsWith(uri))
                    s2 = null;
                else
                if(uri.length() >= s2.length())
                    s2 = null;
                else
                    s2 = s2.substring(uri.length());
                if(s2 != null)
                    s1 = addUri(s1, s2);
            }
        }
        s1 = addQuery(s1, s);
        Hashtable hashtable = null;
        if("true".equals(keepHeaders))
        {
            hashtable = new Hashtable();
            getHeaders(httpservletrequest, hashtable);
            if("true".equals(rewriteHost))
            {
                hashtable.remove("host");
                hashtable.remove("Host");
                hashtable.put("Host", getHostInfo(host));
            }
        }
        GetPost getpost = new GetPost();
        String s3 = getpost.doAction(httpservletrequest.getMethod().toUpperCase(), s1, null, hashtable, -1, proxyHost, proxyPort, encoding, httpservletrequest.getInputStream(), httpservletresponse);
        if(s3 != null)
        {
            int i = getpost.getErrorCode();
            if(i > 0)
                httpservletresponse.sendError(i, s3);
            else
                httpservletresponse.sendError(503, s3);
        }
    }

    public void doPost(HttpServletRequest httpservletrequest, HttpServletResponse httpservletresponse)
        throws ServletException, IOException
    {
        String s = httpservletrequest.getQueryString();
        String s1 = host;
        Object obj = null;
        if(uri != null)
        {
            uri = normalizeUri(uri);
            String s2 = httpservletrequest.getRequestURI();
            if(s2 != null)
            {
                if(!s2.startsWith(uri))
                    s2 = null;
                else
                if(uri.length() >= s2.length())
                    s2 = null;
                else
                    s2 = s2.substring(uri.length());
                if(s2 != null)
                    s1 = addUri(s1, s2);
            }
        }
        s1 = addQuery(s1, s);
        Hashtable hashtable = null;
        Hashtable hashtable1 = new Hashtable();
        Enumeration enumeration = httpservletrequest.getParameterNames();
        do
        {
            if(!enumeration.hasMoreElements())
                break;
            String s3 = (String)enumeration.nextElement();
            String as[] = httpservletrequest.getParameterValues(s3);
            if(as != null && as.length > 0)
            {
                int i = 0;
                while(i < as.length) 
                {
                    hashtable1.put((new StringBuilder()).append(s3).append("<").append(i).append(">").toString(), as[i]);
                    i++;
                }
            }
        } while(true);
        if("true".equals(keepHeaders))
        {
            hashtable = new Hashtable();
            getHeaders(httpservletrequest, hashtable);
            if("true".equals(rewriteHost))
                hashtable.put("Host", getHostInfo(host));
        }
        GetPost getpost = new GetPost();
        String s4 = getpost.doAction(httpservletrequest.getMethod().toUpperCase(), s1, hashtable1, hashtable, -1, proxyHost, proxyPort, encoding, httpservletrequest.getInputStream(), httpservletresponse);
        if(s4 != null)
        {
            int j = getpost.getErrorCode();
            if(j > 0)
                httpservletresponse.sendError(j, s4);
            else
                httpservletresponse.sendError(503, s4);
        }
    }

    private void getHeaders(HttpServletRequest httpservletrequest, Hashtable hashtable)
    {
        String s;
        for(Enumeration enumeration = httpservletrequest.getHeaderNames(); enumeration.hasMoreElements(); hashtable.put(s, httpservletrequest.getHeader(s)))
            s = (String)enumeration.nextElement();

    }

    private String getHostInfo(String s)
    {
        String s1 = s;
        int i = s1.indexOf("://");
        if(i > 0)
            s1 = s1.substring(i + 3);
        i = s1.indexOf("/");
        if(i > 0)
            s1 = s1.substring(0, i);
        i = s1.indexOf("?");
        if(i > 0)
            s1 = s1.substring(0, i);
        i = s1.indexOf("#");
        if(i > 0)
            s1 = s1.substring(0, i);
        i = s1.indexOf(";");
        if(i > 0)
            s1 = s1.substring(0, i);
        return s1;
    }

    private String addQuery(String s, String s1)
    {
        if(s1 != null)
        {
            if(s.indexOf("?") < 0)
                return (new StringBuilder()).append(s).append("?").append(s1).toString();
            else
                return (new StringBuilder()).append(s).append("&").append(s1).toString();
        } else
        {
            return s;
        }
    }

    private String addUri(String s, String s1)
    {
        if(s1 == null)
            return s;
        if(s1.length() == 0)
            return s;
        if(s1.equals("/"))
            return s;
        String s2 = s1;
        if(s2.charAt(0) == '/')
            s2 = s2.substring(1);
        if(s2.length() == 0)
            return s;
        String s3 = "";
        String s4 = s;
        int i = s4.indexOf("?");
        if(i > 0)
        {
            if(i < s4.length() - 1)
                s3 = s4.substring(i + 1);
            s4 = s4.substring(0, i);
        }
        if(!s4.endsWith("/"))
            s4 = (new StringBuilder()).append(s4).append("/").toString();
        s4 = (new StringBuilder()).append(s4).append(s2).toString();
        if(s3.length() > 0)
            s4 = (new StringBuilder()).append(s4).append("?").append(s3).toString();
        return s4;
    }

    private String normalizeUri(String s)
    {
        int i = s.indexOf("*");
        if(i < 0)
            return s;
        if(i == 0)
            return "/";
        else
            return s.substring(0, i);
    }

    private String host;
    private String proxyHost;
    private String proxyPort;
    private String rewriteHost;
    private String encoding;
    private String keepHeaders;
    private String uri;
}
